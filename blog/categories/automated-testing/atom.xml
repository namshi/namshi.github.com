<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automated Testing | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/automated-testing/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2019-01-13T08:19:16+00:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frameworks And Tests in Namshi]]></title>
    <link href="http://namshi.github.io/blog/2013/09/23/frameworks/"/>
    <updated>2013-09-23T15:44:00+00:00</updated>
    <id>http://namshi.github.io/blog/2013/09/23/frameworks</id>
    <content type="html"><![CDATA[<p>As Namshi developers we spend our time doing tickets and coding tasks every day to enhance the
website. However these changes are not stable all the time, sometimes some of these new changes
end up breaking other working parts of our applications without a prior alert until after we deploy it on
our website. As a result we end up having some bugs and hot fixes either immediately after testing the
new deployment or later on when people spot the bugs. Therefore Intensive QA is important because the
manual test only is not enough, even though if we were careful sometimes we’ll probably forget to test
all the affected parts by our changes. And after any deployment we need to test everything and if something
was broken we would need to fix is ASAP.</p>

<!-- more -->


<p>We were working with <a href="http://framework.zend.com/">Zend Framework</a> which is considered as a good
framework for MVC projects, but we decided to move to <a href="http://symfony.com/">Symfony2</a> as it is more
user-friendly to enhance the structure of our projects and make it more organized, service based applications
and most importantly to build automated unit tests. Automated tests are mainly important for testing our tickets
and changes before/after they are deployed for quality assurance purposes. Moreover, such tests need to be
integrated at early stages because it’s very hard to add them after the development of your application.
Therefore, such tests need to be implemented in parallel with your application to make sure you cover
all units and aspects of your application.</p>

<h4>Testing our project using phpunit</h4>

<p>Quality assurance is one of the most important aspects in application development, there are several tests
that can be used for web applications like:</p>

<ul>
<li><h5>Unit Test</h5></li>
</ul>


<p>Unit Tests are usually conducted to test classes and functions within the application itself. It tests how
some functions interact with others and if the desired output and behavior are obtained.</p>

<ul>
<li><h5>Functional Test</h5></li>
</ul>


<p>Functional test is mainly used test the integration between our application [Namshi] and other services
and layers.</p>

<p>This test is useful for checking how our application functions and interacts with internal and external services.</p>

<h4>Why do we waste time on implementing automated tests</h4>

<p>If we develop our applications without writing automated tests to save time, we will end up spending more
time in fixing issues after each deployment. therefore adding automated tests will save our time,
ensure the quality of our application and help us gaining the trust of our customers.</p>

<h4>How to implement automated test</h4>

<p>With the help of symfony2 implementing automated tests is much easier and feasible. First of all you will
need to install <a href="http://phpunit.de/manual/current/en/index.html">phpunit</a> and then develop the test and
 implement it in your application.</p>

<h4>Would automated test modify the application&rsquo;s data</h4>

<p>Automated tests should not affect/modify any data in our application. Therefore we create new databases
for the testing environment, then we use data fixtures
<a href="http://symfony.com/doc/current/bundles/DoctrineFixturesBundle/index.html">DoctrineFixturesBundle</a>
to insert dummy data into the testing databases, and finally we add/delete required data before/after each test.</p>

<h4>Testing <a href="http://namshi.com/">Namshi</a></h4>

<p>We are implementing our tests for our application and all the services that interact with it.
 Our purpose is to cover all aspects of <a href="http://namshi.com/">Namshi</a> with automated test (functional test or unit test)
 to ensure the quality of our application and optimize it.</p>

<p>for now we implemented around 200 test cases
<img class="center" src="/images/posts/test-result-success.png" title="test result" ></p>

<p>These tests won&rsquo;t pass if we have any bugs of the application
<img class="center" src="/images/posts/test-result-failure.png" title="test result" ></p>

<h4>How we assert test results?</h4>

<p>we can assert test results in different ways depending on the response that we are expecting:
<code>
$this-&gt;assertEquals(400, $response-&gt;getStatusCode());
$this-&gt;assertContains("Expected text", $crawler-&gt;filter('*')-&gt;text());
</code></p>

<p>we can also use <a href="http://php.net/manual/en/class.domxpath.php">DOMXPath</a> to filter html result
<code>
$xpath  = new DOMXPath($doc);
$this-&gt;assertContains('expected value', $xpath-&gt;query("//td[@class='html tag class']")-&gt;item(0)-&gt;nodeValue);
</code></p>

<p>or we can expect exceptions
```
/<em>*
 * @expectedException \Namshi\EntityBundle\Exception\InvalidPaymentMethod
 </em>/
 public function testServiceWithInvalidPaymentMethod()
 {</p>

<pre><code>$data   = initial data
$result = $service-&gt;execute($data);
</code></pre>

<p> }
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Behat, Mink and Parallel Runner, A recipe for automated web testing!]]></title>
    <link href="http://namshi.github.io/blog/2013/09/20/behat/"/>
    <updated>2013-09-20T17:13:00+00:00</updated>
    <id>http://namshi.github.io/blog/2013/09/20/behat</id>
    <content type="html"><![CDATA[<p>It was not until I did my first weekend manual testing procedure on Namshi till I came to realize how much time consuming
testing can become. All critical paths starting from registration and login to buying a product using the
available payment methods should be accounted for. Along with that, any irregularities on different pages on the website
must be reported.</p>

<!-- more -->


<p>As Namshi grows and gets more and more complicated, an <em>Automated Web Testing Tool</em> had to be put in place as soon
as possible. An <em>Automated Web Testing Tool</em> is aimed to test that different user interactions with the webpage and web application are going
smoothly without errors or unexpected results.</p>

<p>Keeping those requirements in mind, five main components were considered to build the application:
<a href="http://symfony.com/">Symfony2 Framework</a>, <a href="http://behat.org/">Behat</a> and its
<a href="http://mink.behat.org/">Mink</a> and <a href="https://github.com/shvetsgroup/ParallelRunner">Parallel Runner</a>
extensions and <a href="http://www.doctrine-project.org/projects/orm.html">Doctrine Object Relational Mapper (ORM)</a>.</p>

<p><img class="center" src="/images/arch.jpg" title="&lsquo;App Architecture&rsquo; &lsquo;App Architecture&rsquo;" ></p>

<h2>Behat and Gherkin</h2>

<p>Behat is a PHP Based Behavior Driven Development (BDD) platform that allows the contribution
of stake holders and customers in the development of software products. In BDD, tests are usually
written before the actual development of a feature actually starts. In my opinion,it is a very powerful
approach to overcome any misunderstandings that may arise between developers and other stake
holders during project planning.</p>

<p>The actual tests are written in the Feature files of Behat using the Gherkin language. The following
is an example of a scenario in the integrity feature of Namshi:&ndash;</p>

<p><img class="center" src="/images/gherkin.jpg" title="&lsquo;Gherkin&rsquo; &lsquo;Gherkin&rsquo;" ></p>

<p>As can be noticed, Gherkin is non-technical descriptive language for non-programmers to declare the desired
functionality of the software.</p>

<p>Of course, it is not the case that Behat will automatically understand and run the Feature Files on its own! Behat asks the
programmer to write the definitions of the written statements in a special file named FeatureContext.php right when
you try to run the tests!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>FeatureContext.php </span></figcaption>
 <pre><code class='language-php'>
&amp;lt;?php
/&lt;em&gt;*
* @Then /^I retrieve a couple product links$/
&lt;/em&gt;/
public function iRetrieveACoupleProductLinks() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$links = array_slice($this-&amp;gt;getPage()-&amp;gt;findAll(&apos;css&apos;,&apos;.productsCatalog .itm-link&apos;), 0, 2);
$productsToVisit = array();

foreach ($links as $link) {
    $productsToVisit[] = $link-&amp;gt;getAttribute(&apos;href&apos;);
}

$this-&amp;gt;linksToVisit = $productsToVisit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
</code></pre></figure></notextile></div></p>

<h2>Mink</h2>

<p>Behat can be used to write tests for any application. In order to test web based applications, Behat has to be extended
with the Mink extension. Mink provides an interface between the web browser and Behat in order to test and run different scenarios.
When extended in the FeatureContext.php, Mink provides a rich library to simulate the interactions that
usually take place between a user on a web browser and the web application.
Mink supports a number of browser emulators: Goutte, Sahi, Zombie, Selenium and Selenium2. In our tool, we are mainly
using Selenium2 driver except for some scenarios where Goutte is used.</p>

<p>To cover Namshi&rsquo;s sets of predefined manual tests, six feature files were created:&ndash;</p>

<ol>
<li>integrity.feature: Tests some simple yet critical components of Namshi.</li>
<li>news.feature: Covers Scenarios for user subscription to the newsletter.</li>
<li>registration.feature: Covers different user registration scenarios.</li>
<li>cod.feature (cash on delivery): Scenarios where a user buys a product using cash on delivery.</li>
<li>cc.feature (credit card): Scenarios when a user buys a product using credit card payment method.</li>
<li>pp.feature (paypal): Scenarios when a user buys a product using paypal payment method.</li>
</ol>


<h2>Behat Parallel Runner</h2>

<p>After some trials with the testing tool, we noticed that execution takes some time to complete (~25 minutes). In order to speed up the
execution, a parallelization tool had to be put in place. <strong>Gearman</strong> is a reputable <em>Job Server</em> mostly used to do work in parallel and
in load balancing across processors. It has an extension in Behat that fetches the appropriate Feature Tags to
their corresponding worker processes. The issue with Gearman is that it is very complicated for a simple tool
like the one we are building. Gearman requires a Job Server, OS libraries, PHP extension and Behat extension to operate.
After some research, another tool was found that can deliver the required performance with much less complexity.
<strong>Behat Parallel Runner</strong> also distributes the BDD Test Suite defined in Behat to a number of Behat Instances
without the need for Gearman&rsquo;s client/worker architecture. This distribution is done by defining different <em>profiles</em>
in <em>behat.yml</em> configuration file and specify the number of parallel processes to run. Parallel Runner
Extension for Behat was downloaded and enabled through composer and in the behat configuration file.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>composer.json </span></figcaption>
 <pre><code class='language-json'>
&amp;ldquo;require&amp;rdquo;: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;shvetsgroup/parallelrunner&quot;: &quot;dev-master&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
</code></pre></figure></notextile></div></p>

<p>In order to integrate Parallel Worker, a configuration file for each website was created. In each configuration
file, the same set of profiles was defined. We took advantage of Behat&rsquo;s filtering option to enable each profile
to run a certain <em>tag</em> that is already set in the <em>feature files</em>.
In each configuration file, six profiles were added such that each one runs one <em>feature tag</em>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>behat.yml </span></figcaption>
 <pre><code class='language-yaml'>
F1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@int&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@news&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@reg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@cod&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@cc&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@pp&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div>
Finally, all feature files had to be tagged right before the Feature declaration such that
the extension can identify the scenarios and their corresponding instances.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>behat.yml </span></figcaption>
 <pre><code class='language-yaml'>
default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions:
    shvetsgroup\ParallelRunner\Extension:
        process_count:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>registration.feature </span></figcaption>
 <pre><code class='language-gherkin'>
@reg
Feature: Check Namshi registration Scenarios&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@javascript
Scenario: As a user I register a new account, filling the registration form with proper data
    Given I visit the &quot;register&quot; page
    When I type in the following:
    |RegistrationForm_email           |registration.new+test-(timeStamp)@namshi.com |
    |RegistrationForm_first_name   |test                                                                        |
    |RegistrationForm_last_name   |test                                                                        |
    |birthday_day                            |12                                                                          |
    |birthday_month                        |05                                                                          |
    |birthday_year                           |1987                                                                      |
    |RegistrationForm_password    |121212                                                                  |
    |RegistrationForm_password2  |121212                                                                  |
    |RegistrationForm_gender        |male                                                                      |
    When I press &quot;send&quot;
    Then I am registered as &quot;test&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div></p>

<h2>Namshi Automated Testing in Action!</h2>

<p>Once all settings are completed, we can start the Automated Testing procedure by running Behat
with the <em>config</em> parameter set to the target configuration file, which is the site to be tested.
<div class='bogus-wrapper'><notextile><figure class='code'> <pre><code class='language-bash'>
bin/behat &amp;mdash;config = behat-ae.yml
</code></pre></figure></notextile></div>
Now, six browser windows will pop up and the test suits get executed in parallel!</p>

<p><img class="center" src="/images/execution.jpg" title="&lsquo;Running Test Suite&rsquo; &lsquo;Running Test Suite&rsquo;" ></p>

<p>When the execution completes, we can open the tool&rsquo;s webpage and review the results!</p>

<p><img class="center" src="/images/results.jpg" title="&lsquo;Results on the webpage&rsquo; &lsquo;Results on the webpage&rsquo;" ></p>

<p>Looks like everything is running smoothly!</p>
]]></content>
  </entry>
  
</feed>
