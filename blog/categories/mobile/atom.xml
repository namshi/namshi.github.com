<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2019-09-09T11:22:24+00:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A new way to navigate around the Namshi android app]]></title>
    <link href="http://namshi.github.io/blog/2018/09/03/a-new-way-to-navigate-around-the-namshi-android-app/"/>
    <updated>2018-09-03T06:25:00+00:00</updated>
    <id>http://namshi.github.io/blog/2018/09/03/a-new-way-to-navigate-around-the-namshi-android-app</id>
    <content type="html"><![CDATA[<p>From a UX standpoint, it is really important to strike a good balance between usability and how information is organized within the application. Too much information might be overwhelming to the user, and an improper flow of the information will become a discouraging experience. Having a proper navigation pattern is vital as this helps the users to navigate between various hierarchies of structured or organized information.  One of the biggest challenges within the mobile application purview is in providing a proper navigation, especially due to the smaller size of mobile screens. Several navigational patterns have been designed but each has its own strengths and weaknesses.</p>

<!-- more -->


<p>Android Navigation Drawer (a.k.a Burger Menu or Side Menu) has been ruling Android apps UX for almost 5 years now. Google has made it so easy to implement that it became the primary choice of every app developer when it comes to app navigation. Almost all the apps developed by Google migrated to Navigation Drawer after it was released, so did the Namshi one.</p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_07C9FE3356B59E821BA4395C1035CE40A82CC8DB34E1180E780172D6BED63FC6_1535430699961_NAMSHI-Android-Navigation-Drawer-small.gif" alt="Navigation pattern in NAMSHI Android App." /></p>

<p>As per good UX principles :
&ldquo;<strong>It is extremely important to present your users with the most important destinations within the app.</strong>&rdquo;</p>

<p>While Navigation drawer completely fulfills the above statement, There exist some fundamental problems with this navigation pattern.  Some of these problems are :</p>

<ol>
<li>Lower Discoverability</li>
<li>Less Efficient</li>
<li>Clash with Platform Navigation Patterns</li>
<li>Not Glanceable</li>
</ol>


<p>These problems are described in detail <a href="https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/">here</a></p>

<p>Side menu or a Navigation Drawer can hold relatively large amounts of heterogeneous contents. Apart from having a regular list of navigational items, it can also accommodate secondary information such as user profile details, or actions that are less frequently used but relevant under certain scenarios. One of the major advantages of having a Side menu or a Navigation Drawer is in its ability to save the screen real estate by taking the navigation away from the main screen, thereby making less overwhelming to the users but also can generally result in having poor visibility.</p>

<p>Another major downside of having a Side menu or a Navigation Drawer is that users tend to lose the context quickly as in which page/ destination they are currently in. This cannot be identified easily, as the navigation is hidden beyond the edges of the screen and always require a click of a button or a swipe. Such a limitation in providing a quick visual communication is considered non-desirable.</p>

<p>For an app like ours, with fewer top-level destinations, having a Navigation Drawer is kind of an overkill because there isn’t any secondary information displayed to the user other than the navigation. A fair amount of the screen remains, unused.</p>

<h2>Welcoming Bottom NavBar</h2>

<p>A good percentage of the users prefer to have a single-hand interaction with their mobile devices/ apps. Pressing on the Burger menu icon in the action bar or swiping a finger from the edge of the screen reveals the hidden Navigation Drawer. Most of the cases, using Navigation Drawer will require the use of your second hand.  Though this is a typical UX pattern followed in many play store apps, it is not really the best nor is necessary depending on the context of your app. It is imperative to have a consistent navigation and the flow within the app making sense to your users.</p>

<p>Bottom navigation is one of the best suitable navigation patterns, arguably due to its ergonomic placement on the screen. It provides quick and easy access to the various top-level destinations. As mentioned in the Google Material Design guidelines, it is recommended to use the new Bottom navigation when there are <strong>three</strong> to <strong>five</strong> top-level destinations thus making it ideal for the Namshi app, as it has five top-level destination pages (Home, Search, Wishlist, Shopping bag, and My Namshi).</p>

<h2>A little about the Namshi app Configuration</h2>

<p>Our app is highly configuration-driven. A set of configuration settings from our server, dictates the app on its various aspects such as the language of the displayed content, the home screen layout, content modules like images, gifs, videos, sliders, expandable/ scrolling lists, target for the user actions, showing quick alerts, arrangement of our products catalog, details in our checkout page, payment methods, our brand new delivery promises (<a href="http://tech.namshi.io/blog/2018/08/06/delivery-promises-in-the-wild/">read more</a>), region-specific business rules. Pretty much everything in the app… you name it, it’s configuration driven! Navigation too is no exception and will follow suit! A specific property in the app configuration decides how our users will navigate within the app. This makes the implementation of the new Bottom navigation much challenging as any new changes should not break the existing Navigation Drawer functionality.</p>

<h2>Implementing Bottom Navigation View</h2>

<p>Bottom Navigation View is available as part of the Android Design Support library and the corresponding dependency should be added in the app <code>build.gradle</code> file.</p>

<pre><code>dependencies {
  ...
  compile 'com.android.support:design:&lt;relevant.sdk.version&gt;'
  // This was added in version 26.1.0. Visit the android doc for more info.
}
</code></pre>

<p>Once this dependency is added, next would be to include the BottomNavigationView in your app layout. Add the BottomNavigationView to the root layout of your app.</p>

<pre><code>&lt;android.support.design.widget.BottomNavigationView
       android:id="@+id/namshi_bottom_navigation"
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:layout_gravity="bottom" /&gt;
</code></pre>

<blockquote><p>Having a CoordinatorLayout as the root will enable us to use <strong>bottom navigation behavior</strong>. This behavior will make the BottomNavigationView scroll aware by hiding/ showing it when users scroll through a list thereby giving more space for displaying contents.</p></blockquote>

<p><strong>Other Supported Attributes</strong>
Below are some of the supported attributes.</p>

<ul>
<li><strong>elevation</strong> &ndash; Controls the elevation of this view.</li>
<li><strong>itemIconTint</strong> &ndash; Single color or even a color selector &ndash;  Sets the color of the menu item icon depending on their states.</li>
<li><strong>itemTextColor</strong> &ndash; This attribute can be used to change the title text color of the menu item. Supports a single color or a color selector.</li>
</ul>


<p><strong>Setting Bottom navigation Menu Items</strong>
Adding menu items to a BottomNavigationView is similar to that of adding menu items to a NavigationView in a Navigation Drawer layout. Menu items can be defined in an xml menu resource file or can be added dynamically. Being configuration-driven, it makes more sense to dynamically add the menu items depending on the configuration, rather than to have it populated from a static menu resource file.</p>

<blockquote><p>BottomNavigationView supports up to five menu items and anything more than that will result in a Runtime exception, crashing the app. This is a typical scenario that can occur upon activity re-creation when menu items are added dynamically.</p></blockquote>

<p>See to it that a proper check is in place, so as to not exceed the limit of menu items in the BottomNavigationView. An alternative to this is to clear any existing menu items prior to populating it.</p>

<pre><code>fun addBottomNavigationMenuItems() {
  bottomNavigationView?.let { bnv -&gt;
      bnv.menu?.let { menu -&gt;
          menu.clear()
          // Add menu items to bnv here
      }
  }
}
</code></pre>

<p>BottomNavigationView has a lot of limitations compared to many 3rd party Bottom navigation libraries. One such main limitation is the lack of support for Action Views in menu items. Android provides custom view support for menu items by the means of Action Views. Unfortunately, BottomNavigationView tends to ignore the Action Views, making it hard to customize individual menu items. Setting an Action View on the BottomNavigationView menu items seems to have no effect by which it is drawn in the layout. Below code snippet illustrates adding a Search menu item dynamically to the BottomNavigationView.</p>

<pre><code>val menuSearch =
    bottomNavigationView.menu.add(
      Menu.NONE, R.id.bottom_nav_item_search, Menu.NONE, R.string.search)

menuSearch
  .setIcon(R.drawable.bnv_search_selector)
  .setActionView(View(context))
  .actionView.tag = arrayOf(FRAGMENT_PRODUCTS_SEARCH)
</code></pre>

<p>Even though BottomNavigationView ignores the Action Views, this can still be leveraged to make our new navigation aware of the destination pages. Every menu item has an Action View set to it, so that, the respective Action Views can hold a list of fragment tags that it represents. More about this is in the <strong>Fragment Awareness</strong> section, below.</p>

<h2>Event listeners</h2>

<p>Just like any other views, BottomNavigationView also has got a set of events and associated listeners to it. The one we are interested now is <strong>OnNavigationItemSelectedListener</strong>. Selecting any menu items will trigger the <strong>onNavigationItemSelected()</strong> event of this particular listener. This event will also pass along with it the selected menu item based on which, appropriate logic for the navigation is performed.</p>

<pre><code>override fun onNavigationItemSelected(item: MenuItem): Boolean {
  when (itemId) {
      ...
      R.id.bottom_nav_item_search -&gt; appMenuListener.displaySearchFragment()
      ...      
  }
}
</code></pre>

<h2>Fragment awareness and support for Deep links</h2>

<p>The Namshi android app follows a Single Activity and Multiple Fragments pattern and its architecture are highly decoupled. A helper class is responsible for performing all fragment transactions and this is in turn used by the AppMenuListener (a dagger2 dependency) which encapsulates the necessary logic for performing navigation to the appropriate destination page. When a user selects any particular navigation menu item, the corresponding event is triggered that invokes a specific action defined in the AppMenuListener.</p>

<p>Apart from this, users can still navigate to any destinations within the app by external means such as a Push Notification or even by Deep-links. In the Namshi android app, deep-links are resolved by a DeepLinkListener (yet another dagger2 dependency) which will perform the relevant routing, making use of the actions defined in the AppMenuListener. Implementing a consistent navigation across the app and to maintain the proper menu item states without changing this underlying implementation becomes challenging because, in such scenarios, navigation is not through but outside the bottom navigation.</p>

<p>In order to overcome this, our BottomNavigationView controller has implemented OnBackStackChangedListener of the FragmentManager class, which will trigger an event whenever a fragment is changed in the back stack. This will try to match the tag of the topmost fragment in the back stack to that stored in the navigation menu items.</p>

<pre><code>override fun onBackStackChanged() {
  clearMenuItemState()
  // NPE Check - if not detached from the activity
  val topFragment = FragmentHelper.getTopFragment(activity)
  topFragment?.let { fragment -&gt;
    changeMenuItemState(fragment.tag)
  }  
}

fun changeMenuItemState(fragmentTag : String ?) {
    ... // Clear previous menu states if required
    menu?.let {
      for (i in 0 until it.size()) {
          val menuItem = it.getItem(i)
          menuItem?.let { item -&gt;
              val tags = item.actionView?.tag as? Array&lt;String&gt; ?: null
              val index = tags?.indexOf(fragmentTag) ?: -1
              if (index &gt;= 0)
                ... // Change the menu item state and return
          }
      }
    }
}
</code></pre>

<p>Let’s see the new Bottom navigation in action!</p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_07C9FE3356B59E821BA4395C1035CE40A82CC8DB34E1180E780172D6BED63FC6_1535456216606_ezgif.com-resize+2.gif" alt="" /></p>

<h2>Notification Bubble</h2>

<p>One of the most sought-after features for the Bottom navigation is to have a notification bubble with a notification count which is not supported by the BottomNavigationView out of the box. Using Action Views would have been the ideal approach for such use cases, but that is not an option here! Having that said, it is also not an impossible task either, to implement a simple Notification bubble to the menu items in the BottomNavigationView. Just a tiny tweak in the BottomNavigationView layout hierarchy can help us reach our goal! Every menu item in the BottomNavigationView is essentially a <strong>BottomNavigationItemView</strong> extending the android <strong>FrameLayout</strong>. There are no APIs available to interact with this directly. Below is a sample snippet for adding a notification bubble/ badge to any specific menu item in the BottomNavigationView.</p>

<pre><code>fun addNotificationBadge() {
  bottomNavigationView?.let {
      ... // Get the Menu View from the parent BottomNavigationView
      menuView?.let { mView -&gt;
        ... // Get the corresponding menu item index
        val menuItemView = mView.getChildAt(/*index*/) as? BottomNavigationItemView
        val bubbleView = LayoutInflater.from(context)
                        .inflate(R.layout.bottom_nav_bubble_layout, null)
        ... // Find the corresponding view to update the count
        menuItemView.addView(bubbleView)
      }
  }
}
</code></pre>

<p>Voila! Make sure to add the notification bubble during the initial setup of the BottomNavigationView but after the initialization of the menu items.</p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_07C9FE3356B59E821BA4395C1035CE40A82CC8DB34E1180E780172D6BED63FC6_1535456573986_ezgif.com-gif-maker.gif" alt="Notification bubble in action" /></p>

<blockquote><p>It will be good to consider making the notification bubble layout as simple as possible so as to reduce the layout over-draws. Adhere to good practices, use flat rather than nested or intricate layouts!</p></blockquote>

<h2>Future enhancements</h2>

<p>During I/O 2018, Google introduced the new <strong>Navigation-components</strong> to the Android Architecture which will greatly simplify the way navigation is done within the app. This will help in implementing a consistent navigation between various destinations within your app in a disentangled way. Each destination can be a fragment, an activity, a navigation graph or a subgraph. Custom destinations are also supported. Navigation-components also support actions, type-safe arguments, deep-links and will also go well with the BottomNavigationView. Many of the problems and user requirements mentioned above can be addressed with this. One such important issue that this will solve, is building the stack of destination pages when a user navigates through a deep-link, which otherwise would have happened during manual navigation. Our app, being mostly a “Single Activity and Multiple Fragments app” can be easily migrated to the new Navigation Architecture with less effort. This promising new addition to the Android Architecture enforces conformance to the Architecture guidelines thereby facilitating a consistent and predictable navigation by decoupling the routing logic that otherwise is contained in the view layer, which can become quite tedious to maintain and modify in larger applications.
Another great feature to have with Bottom navigation is to introduce the <strong>Bottom Navigation Behavior</strong> which will show and hide the Bottom Navigation View when a user scrolls through a huge list just like our Products catalog page, giving more space for displaying the list contents.</p>

<h2>To wrap-up!</h2>

<p>Android BottomNavigationView has got several limitations and there are many 3rd party implementations overcoming them. Nevertheless, none of that has stopped us from using it in the Namshi android app. We at Namshi embrace new challenges that help us get better in delivering the best experience for our users. Apart from this fixed navigation pattern, the deep-links support provides quick access to any specific destinations within the app rather than to go through multiple levels, manually. Fragment awareness comes in handy, as this will make the Navigation menu items to be on the right state when the destination page is loaded. By using Bottom Navigation, the content of the app of becomes readily discoverable and it gets easy to do single-handed navigation.
Go ahead and download <a href="https://play.google.com/store/apps/details?id=com.namshi.android&amp;hl=en">Namshi App</a> from Google Play and let us know how the new navigation feels like!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open Source UI libraries from our iOS Mobile team]]></title>
    <link href="http://namshi.github.io/blog/2018/04/17/open-source-ui-libraries-from-our-ios-mobile-team/"/>
    <updated>2018-04-17T07:08:00+00:00</updated>
    <id>http://namshi.github.io/blog/2018/04/17/open-source-ui-libraries-from-our-ios-mobile-team</id>
    <content type="html"><![CDATA[<p>Recently, the Namshi iOS app went through a UI overhaul which includes a new font, improved UX on a few screens and some attractive animations. Customers loved it, the team enjoyed working on it and, best of all, conversion rate increased.  To achieve this, we relied on a few open source libraries available through Cocoapods.</p>

<p>Some of the available open source UI components are very well written and while working with these, you will get a lot of inspiration. I won’t hesitate to mention <a href="https://github.com/Skyscanner/SkyFloatingLabelTextField/">SkyFloatinglabelTextField</a> from SkyScanner and <a href="https://github.com/xmartlabs/XLPagerTabStrip">XLPagerTabStrip</a> here. Sometimes, the UI requirements are very specific and UI libraries will not support the particular use-case you have. While working on the UI improvement for Namshi iOS app, we faced the same situation where we had to modify an existing library to tweak its looks.</p>

<!-- more -->


<p>So it was a combination of inspiration and custom requirements that resulted in two awesome UI components which we recently published on Cocoapods. Let me Introduce these libraries separately below :</p>

<h1>NMFloatLabelSearchField</h1>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522079824203_CocoaPodsSwift-feature.png" alt="" /> <span style="margin-left: 15px"><a href="http://cocoapods.org">www.cocoapods.org</a></span></p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522078748825_github.png" alt="" />  <span style="margin-left: 15px"><a href="https://github.com/namshi/NMFloatLabelSearchField">https://github.com/namshi/NMFloatLabelSearchField</a></span></p>

<h2>Case Study :</h2>

<p>We had a requirement to implement UITextFields on which hints float up when the user starts to type; the border can also be highlighted based on different delegate callbacks and on validation errors.</p>

<p>We found SkyFloatingLabelTextField which does that perfectly and supports RTL languages as well.  Here comes the challenge: we had a city suggestion field in the form which dynamically displays a suggestion list as user starts to type, and this feature is not supported in SkyFloatLabelTextField. So we started our search again and found one more library, SearchTextField. We went ahead with it and used both of them.</p>

<p>Soon we realized that the UX of the screen is not appealing as five fields (name, country code, city code, phone number and address) are having floating-placeholders but the city field looks like a fish out of water here. We at Namshi are always eager to make the UX smooth and appealing for our customers, so we decided to join the two third-party libraries’ functionality and combine them for our city-search-field.</p>

<h2>Solution:</h2>

<p>In the beginning, we extended the functionality of SearchTextField and added the code from SkyFloatingLabelTextfield to achieve FloatingLabelSearchField functionality. It worked well but we realized that we are not properly getting the textField delegate callbacks (didEndEditing never worked).
We looked into the open issues for SkyFloatingLabelTextField but there was none related to this. Then we looked for the open issues for SearchTextField and — voila! — we found an <a href="https://github.com/apasccon/SearchTextField/issues/36">open issue</a> in the library. We changed our strategy; extended the functionality of SkyFloatingLabelTextfield and added the code for SearchTextField in the our code. We faced few bugs and me managed to fix those  and…..
Yalla, it really worked!
Soon our app was in store with the awesome looking “Add New Address” screen with smooth user experience.</p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522081067491_image_preview.png" alt="" /></p>

<h1>NMAnimatedTabbarItem</h1>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522079824203_CocoaPodsSwift-feature.png" alt="" />  <span style="margin-left: 15px"><a href="https://cocoapods.org/pods/NMAnimatedTabBarItem">https://cocoapods.org/pods/NMAnimatedTabBarItem</a></span></p>

<p><img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522078748825_github.png" alt="" /><span style="margin-left: 15px"><a href="https://github.com/namshi/NMAnimatedTabbarItem">https://github.com/namshi/NMAnimatedTabbarItem</a></span></p>

<h2>Case Study :</h2>

<p>The tabbar used in Namshi app was pretty basic, it looked like the tabbar from Apple&rsquo;s built-in apps when iOS 7 was released. We realized that almost all the major apps are incorporating some animations on tab bar so it was the right time to spice up UITabbar used in Namshi app.</p>

<p>We first started with <a href="https://github.com/Ramotion/animated-tab-bar">Ramotion</a> — this library is awesome! After playing with it for few hours, we realized that it has some deal breakers such as missing support  for RTL languages and has a problem putting tab items back into the correct position when you move to a screen which does not have a tabbar and try to come back to a screen which does. We forked the library, tried to solve the issues but gave up as, one after the other, new issues came up.</p>

<h2>Solution:</h2>

<p>We started by digging deep into Ramotion and we got the basic idea how they are animating Tabbar items. We used the same approach and made the whole thing much more simpler.</p>

<p>We created an open class NMAnimatedTabBarItem inherits from NSObject with a public method called animateTabBarItem.</p>

<p>We have to pass 3 arguments to this method, tabBar(UITabBarController.tabBar), tabIndex (Selected tabItemIndex) and finally animationType(NMAnimationtype).</p>

<p>NMAnimationtype could be:</p>

<ul>
<li>Bounce</li>
<li>Rotation</li>
<li>Transition</li>
<li>Frame</li>
</ul>


<p>For Bounce, Rotation and Transition tabbar item image required. For Frame animation we have to pass UIImage Array.</p>

<p><span style="text-align: center; display: block">
<img src="https://d2mxuefqeaa7sj.cloudfront.net/s_ED3A3F43C1A3C37015D225DDB70A39423F77B009324EF3510BD4811463D17DED_1522583517426_ezgif.com-resize.gif" alt="" />
</span></p>

<hr/>


<h1>Some Useful Links for Creating Custom Pods</h1>

<ul>
<li><a href="https://code.tutsplus.com/tutorials/creating-your-first-cocoapod--cms-24332">https://code.tutsplus.com/tutorials/creating-your-first-cocoapod&mdash;cms-24332</a></li>
<li><a href="https://guides.cocoapods.org/making/private-cocoapods.html">https://guides.cocoapods.org/making/private-cocoapods.html</a></li>
<li><a href="https://guides.cocoapods.org/making/specs-and-specs-repo.html">https://guides.cocoapods.org/making/specs-and-specs-repo.html</a></li>
<li><a href="https://medium.com/@shahabejaz/create-and-distribute-private-libraries-with-cocoapods-5b6507b57a03">https://medium.com/@shahabejaz/create-and-distribute-private-libraries-with-cocoapods-5b6507b57a03</a></li>
<li><a href="https://www.raywenderlich.com/99386/create-cocoapod-swift">https://www.raywenderlich.com/99386/create-cocoapod-swift</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuilding our mobile website: Express & React meet fun & profit]]></title>
    <link href="http://namshi.github.io/blog/2017/05/02/rebuilding-our-mobile-website/"/>
    <updated>2017-05-02T18:37:00+00:00</updated>
    <id>http://namshi.github.io/blog/2017/05/02/rebuilding-our-mobile-website</id>
    <content type="html"><![CDATA[<p>Late last year we decided to give our mobile website a new look, coupled with a new “engine” in order to optimize our mobile experience on the web. Most of our users visit Namshi from mobile devices and we wanted to give them better usability, performance and overall smoother experience.</p>

<!-- more -->


<p>When we started approaching the mobile landscape, 4 years back, we decided to fully commit to an SPA that worked well but showed some limitations, namely the inability to perform server-side rendering, which was somewhat critical in terms of search engine optimization and first render: we solved the former by routing bots’ traffic to our desktop website (a traditional server-side app), but the latter proved hard to solve, as the client would have to download our entire app before being able to understand what page and layout it should render. In the meantime, Google decided to roll the “<em>mobile-friendly</em>” badge on their mobile SERPs, which forced us to look for alternatives.</p>

<p>A year and a half down the line, facing mixed results in terms of conversion rate and usability, we decided to review our implementation and build a small isomorphic app that would be able to render both on the client and the server, but this approach had 2 major flaws: first off, we didn’t look at neither our UX nor UI to figure out if there was anything we could do to make the user’s experience better and, second, we over-engineered our stack. Back then React just started garnering attention and, unsure if <em>that</em> would be the way the community would build “frontend” apps 3/5 years later, we decided to write a very small custom-made isomorphic framework that turned way more complicated than we originally thought.</p>

<p>At Namshi, we’re very big on simplicity and &ldquo;<em>back to the basics”</em> but, as you see, that’s also thanks to <strong>lessons we learned the hard way</strong>.</p>

<p>Flash-forward to Q4 2016, we looked at our mobile website and our metrics combined and decided it was time to completely re-think our approach: 2 of our engineers quickly hacked together a prototype within less than a week and, after discussing it with our PM team, we decided it was worth a shot.</p>

<p>The Falafel Project was born. Sounds like a joke but that’s what we actually called it :)</p>

<h2>Fundamental ideas</h2>

<p>The project kicked off by embracing 3 very important ideas:</p>

<ul>
<li>most of Namshi’s  traffic is served through our mobile apps (<a href="https://itunes.apple.com/us/app/namshi-online-fashion-shopping/id840127349?mt=8">iOS</a> + <a href="https://play.google.com/store/apps/details?id=com.namshi.android">Android</a>). We should probably <strong>mimic the app as much as possible</strong><strong>.</strong></li>
<li>The journey of the user is defined by very few, key components: landing pages, product listing pages, product detail pages, cart and checkout. We want to make sure we waste no time presenting these pages to the user, and <strong>server-side rendering</strong> gives that to us</li>
<li>If we want this webapp to look like it’s 2017, client-side interactions are unavoidable: <strong>picking React</strong>, given its rise in the frontend community and the fact that it’s a library, rather than a framework, was a no-brainer</li>
</ul>


<p><img class="center" src="/images/posts/web-mobile-demo.gif" title="" ></p>

<h2>Re-writing the styles</h2>

<p><img class="center" src="/images/posts/css-code.png" title="" ></p>

<p>We trashed the old css and rewrote it from scratch following the <a href="http://getbem.com/">BEM</a> way of doing things, which allowed us to separate styles per page and also have some of them shared between pages.
The total size of the minified styles was 18kb, now it is <strong>10kb:</strong> almost half of our css is gone!</p>

<h2>RTL styles</h2>

<p>It&rsquo;s always painful to handle direction in css, especially considering that things could have been much easier if <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties">logical properties</a> where introduced, but yet we still use the old techniques until we can fully dump rules overriding.</p>

<p>For example:</p>

<p><code>css
/**
 flex-start, flex-end logical properties will change according to the
 direction: rtl : ltr;
**/
.element {
 display: flex;
 align-items: flex-start;
 justify:-content: flex-start;
}
/**
 opposite to: text-align, css-transforms, floats, margins, paddings ..etc
 which we need to override manually.
**/
</code></p>

<p>We kept the arabic styles in separate files, i.e <code>list.scss / list-rtl.scss</code> where the <code>*-rtls.scss</code> will only override rules in the main file.
That worked for us really well and was a substantial increase in code maintainability.</p>

<h2>Enhanced UX leveraging on mobile browsers</h2>

<p>We took a decision to ditch SPAs in favor of lightning-fast server-side rendered pages.</p>

<p>Despite that, we took advantage of a very interesting feature on modern mobile browsers:
if you tap on a link, they kinda fade the newly painted page over it so if there are common visual components you won’t feel the page load.</p>

<p>Strange, right? Have a look:</p>

<div align="center">
<iframe width="276" height="500" src="https://www.youtube.com/embed/WIOe1ID3ocM" frameborder="0" allowfullscreen></iframe>
</div>


<p>So how we can use it for our own good?
We came up with idea of a “<strong>Shadow Product”:</strong>  When a user taps on a product while on the catalog listing page, we delay the tap event for 10ms and we show a fake preview of what the next product page will look like. Simple and dirty, but looks great!</p>

<p>```js</p>

<pre><code>on('click', 'body', '.is-shadow-product', e =&gt; {      
 .... code that extracts content from clicked product
 this.setState({ data: data, show: true });      
 setTimeout(function () {        
   window.location.href = href;      
 }, 10);
})
</code></pre>

<p>```</p>

<p>The problem with this approach is that we need to handle the <a href="https://developer.mozilla.org/en-US/docs/Working_with_BFCache">back-forward cache</a> of some browsers:</p>

<p>```js</p>

<pre><code>// Prevent backforward cache in iOS devices
if(config.get('deviceOS') === 'iOS'){
  window.addEventListener('pagehide', function(e) {
    let shadowProduct = document.querySelector('.is-transitional');
    shadowProduct &amp;&amp; shadowProduct.classList.remove('is-transitional');
  });
}
</code></pre>

<p>```</p>

<h2>NO jQuery</h2>

<p>Late, but we eventually joined the party! We stripped jQuery off  80% of our pages and we replaced with some vanilla utilities like the following:</p>

<ul>
<li><strong>On</strong> :</li>
</ul>


<p>```js
  export function on(eventType, parent, selector, fn){</p>

<pre><code>let el = document.querySelector(parent);  
if(!el || !eventType || !selectorParent || !selector  || !fn ) {   
  return null;
}

el.addEventListener(eventType, function(e) {   
 .... logic to target the child on the event bubbling.
</code></pre>

<p>   })
  }, false);</p>

<p>```</p>

<ul>
<li><strong>Scroll to, Scroll To Top and Scroll To Bottom:</strong></li>
</ul>


<p>```js</p>

<pre><code>function animateScroll() {    
  var step = (dest - parent.scrollTop) /  steps--;    
  parent.scrollTop = parent.scrollTop + step;    
  if(steps === 0 ){      
    frame &amp;&amp;  cancelAnimationFrame &amp;&amp; cancelAnimationFrame(frame);       
    return    
  }     
 frame = requestAnimationFrame &amp;&amp;    
 requestAnimationFrame(animateScroll);   
}
</code></pre>

<p>```</p>

<hr />

<ul>
<li><strong>Image Carousel:</strong></li>
</ul>


<p>We crafted our own slider (<a href="https://medium.com/@MohamedAmin88/slim-slider-yet-another-javascript-slider-2f2069bb72e5">read the full story here</a>):</p>

<p><img class="center" src="/images/posts/slim-slider.gif" title="" ></p>

<h2>Low Fat React: Preact!</h2>

<p>Though we chose SSR, we were not building a static news website. You can imagine how much client side interactions an E-commerce mobile website has. Our previous mobile website was a tailor made isomorphic app, and we had lot of lessons learned from it. Moreover, performance was a key focus area for our new website, hence we kept some design decisions for all the client-side stuff. These includes:</p>

<ul>
<li>Our website should be interactive under 5s.

<ul>
<li>Should have a great rendering performance. Animations and transitions should be ~60FPS.</li>
<li>Total client-side scripts should be less than 100KB ( including any frameworks / library ).</li>
<li>Build re-usable client-side components.</li>
</ul>
</li>
</ul>


<p>By considering all the above, we wanted something lightweight and with good rendering performance.</p>

<p>We initially ruled jQuery out of the list and thought of creating all client-side components in vanilla js, however, we found that managing the UI state was bit hard with that approach. Moreover, we really liked the redux architecture and keeping a single store for managing the whole UI state.</p>

<p>React was the hottest choice for our expectations but, at the same time, we wanted a lightweight library. Then we came across <strong>Preact</strong>, a 3KB React alternative which offered the same API and great performance.</p>

<p>We built most of our components in Preact and re-used them across pages. Although we liked the redux architecture, we didn&rsquo;t really use Redux on our website. Instead, we built a micro-redux which has a global store for managing the whole UI state and is connected to all Preact components. This helped us to manage the UI state in a single store and synchronizing updates in every part of the page.</p>

<h2>Simplifying the DOM states</h2>

<p>Managing state is one of the crucial parts of  &ldquo;react like&rdquo; development, especially state shared between components (Shared State) can be difficult to manage. We have good libraries that achieves this efficiently &mdash; ie. <a href="http://redux.js.org/">Redux</a> and <a href="https://mobx.js.org/">Mobx</a> that we use on some of our SPAs.</p>

<p>In the new mobile website, our approach is a bit different because each page is SSR and we have very less shared state: we try to reduce client-side code to the minimum, to keep things simple and less bloated.</p>

<p>We have one store which is the single source of truth. To keep things simple every component has it own actions as part of the component, and we only focus on resolving all data into the store and the store automatically updates the state of the components. Unlike most redux implementations, where reducers are used to update the current state based on the actions,  every update always produces a “next state“ without reference to the current state.</p>

<h2>Webpack, Code splitting and Preloading techniques</h2>

<p><img class="center" src="/images/posts/chunk-size.png" title="" ></p>

<p><strong>Code splitting: eat only what you need</strong></p>

<p>Code splitting was a crucial part for our website. Traditionally, we used to bundle all our JavaScript assets into one single file, and loaded it in every page. At that time it was a very performance-friendly approach, as the browser gets all the assets with a <strong>single HTTP request</strong>.</p>

<p>With HTTP2, things changed — multiple round-trips are avoided by channelling multiple requests through a single connection. Knowing this, sending a large bundle (which includes code that&rsquo;s not needed in the current page) would negatively impact the page’s performance so we decided to split our code based on the routes ( different pages ).</p>

<p>We chose Webpack2 for bundling and code-splitting. As we said earlier, we generate js bundles ( aka chunks in webpack terminology ) for each page. We used Webpack&rsquo;s <a href="https://webpack.js.org/plugins/commons-chunk-plugin/">CommonsChunkPlugin</a> to generate a vendor bundle and common code shared between the page level bundles. This helped us to keep smallest JavaScript payload for each page. Furthermore, the vendor chunk and common chunk will change less frequently and can be cached by the browser for most requests, enabling faster transitions between pages.</p>

<p><strong>Reduce bundling and nested dependencies</strong></p>

<p>Webpack2 supports <a href="https://webpack.js.org/guides/tree-shaking/">Tree-shaking</a> out of the box, which helped us reduce the bundle size by ~20% by only including the required modules.</p>

<p>For example, we used some lodash utilities in our client-side code. Without Tree-shaking, the whole of lodash would have been imported into our bundles, thus the size would&rsquo;ve been much bigger. Webpack2 will instead generate the bundle only with the code that’s actually used.</p>

<p><strong>Preload, Prefetch</strong></p>

<p>We also took advantage of the latest browser features for attaining better page load speed. These includes the <code>dns-prefetch</code> for prefetching for resolving domain names, <code>link-preload</code> for loading the CSS and JS assets at the same time HTML is parsed. We also used <code>link-prerender</code> in our catalog listing page pagination to make the transition between pagination much faster.</p>

<p>Notice the <strong>Green Line</strong> ( which indicates the first paint ):</p>

<p><strong>Before</strong></p>

<p><img class="center" src="/images/posts/before-preload.png" title="" ></p>

<p><strong>After</strong></p>

<p><img class="center" src="/images/posts/after-preload.png" title="" ></p>

<h2>Goodbye good old image sprites</h2>

<p>Thanks to HTTP/2, making HTTP requests is cheaper than ever: multiplexing reduces the connection overhead as multiple requests can be tunneled through the same connections, and extended header compression (<a href="https://http2.github.io/http2-spec/compression.html">HPACK</a>) makes it so that those requests are lighter than ever.</p>

<p>This doesn’t mean sprites won’t give you any advantage: as always, making 10 HTTP requests instead of 1 is generally heavier, but with HTTP/2 you don’t “feel” it as much. Another argument <em>pro</em> sprites is that by combining images together we end up allowing the compression algorithm (ie. GZIP/DEFLATE) to better optimize the size of the final, combined image.</p>

<p>All in all, though, we eventually decided not to worry about these and live a less complicated life because:</p>

<ul>
<li>We generally bundle all required images into one sprite, whereas each page might just need 2/3 of them: this means that instead of downloading 100% of your images on the first page load we only require 20/30% of them</li>
<li>Maintaining sprites is no fun at all: if there’s a way to eliminate work and be <em>on par</em> with our previous implementation, then we’re definitely going to cut it short</li>
</ul>


<h2>Results</h2>

<p>Numbers, since we went live in mid-February, have been astounding. Even though web traffic is a small chunk of our overall traffic, it’s been way better than we could ever imagine:</p>

<ul>
<li><strong>conversion rate is up ~20%</strong>, meaning that the overall shopping experience is smoother (worth to note that some of the countries we serve have spikes in conversion of +30/70%)</li>
<li><strong>bounce rate is down 15%</strong>, which indicates that our first impression (load time, UI, etc) has definitely improved</li>
<li>the <strong>average time on page is up 50%</strong>, and the <strong>average session duration up 37%</strong>, meaning users enjoy spending time on the site way more than before</li>
<li>the <strong>average document load time &amp; average document interactive time are both down</strong> <strong>54%</strong> (4+ seconds vs 1.9), which means that…   …well, we really screwed it up with the previous app :)</li>
</ul>


<p>Take this numbers with a pinch of salt, as we mentioned in the introduction of this article, we started from a very disadvantageous point — the performance of the old mobile website was quite disappointing — and, at the same time, Namshi grows and optimizes on a daily basis, so better numbers are expected regardless.</p>

<p>Last but not least, one for the server-side freaks.
In this article, we spoke a lot about frontend optimizations and the likes, but I want to share an image to show the performance of our server-side rendering process:</p>

<p><img class="center" src="/images/posts/web-mobile-results.png" title="" ></p>

<p>As you see, our <strong>average response time is around 40ms</strong> — but you shouldn’t  care, as <a href="https://www.dynatrace.com/blog/why-averages-suck-and-percentiles-are-great/">averages make for a terrible KPI</a>.</p>

<p>Percentiles are really what you want to look at:</p>

<ul>
<li>the <strong>median is at around 25ms</strong>, meaning half of our requests are served within that time</li>
<li>the <strong>95th percentile is at around 120ms</strong>, which is still incredibly great, considering that the website fetches the data it displays from an internal API, and that involves an external HTTP call</li>
</ul>


<p>See you next time!</p>

<p><em>This article is a joint effort between the 3 frontend musketeers of Namshi:
<a href="http://tech.namshi.io/team/#Shidhin%20CR">Shidhin</a>, <a href="http://tech.namshi.io/team/#Mohamed%20Amin">Amin</a> and <a href="http://tech.namshi.io/team/#Gabriel%20Izebhigie">Gabriel</a></em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Currently hiring: backend and mobile engineers]]></title>
    <link href="http://namshi.github.io/blog/2017/03/09/currently-hiring-backend-mobile-developers-dubai/"/>
    <updated>2017-03-09T06:49:00+00:00</updated>
    <id>http://namshi.github.io/blog/2017/03/09/currently-hiring-backend-mobile-developers-dubai</id>
    <content type="html"><![CDATA[<p>We&rsquo;re currently looking for some help in a couple areas of our tech team &mdash; why
don&rsquo;t <strong>you</strong> join us?</p>

<!-- more -->


<h2>Mobile</h2>

<p>Getting into the specifics, we&rsquo;ve been working with an external mobile team (3rd party)
that wrote our apps from scratch, setup an efficient testing &amp; CI strategy and a
very solid deployment workflow &mdash; as a matter of fact, we&rsquo;re very proud of our
crash rate on both platforms, with android leading at 0.05%.</p>

<p>We are comfortable with the quality of our apps and the pace of development but,
in order to take them to the next level, it&rsquo;s clear to us that we need our own
team to do that: commitment, communication and going the extra-mile are definitely
different when you&rsquo;re part of the organization.</p>

<p>On the long run the team is going to be comprised of a few engineers and a lead,
so we&rsquo;d initially like to start with:</p>

<ul>
<li>1 <strong>lead mobile developer</strong>, who should ideally have good experience on both platforms</li>
<li>1 <strong>senior iOS developer</strong></li>
<li>1 <strong>senior android developer</strong></li>
</ul>


<p>The <strong>lead mobile engineer</strong> should ideally be a very hands-on, seasoned mobile
engineer with experience leading / forming a team &mdash; he will need to
help building the team, setting the right direction, overseeing development
on both platforms and coordinating with other teams (ie. backend
or product management) on feature development and aligning priorities. We expect
him to spend around 50% of his time on development (this is still a <em>hands-on</em> position),
and the other 50% on the team, teaching practices, reviewing pull requests and so on.</p>

<p>We expect from <strong>senior engineers</strong> to be able to write clean, testable code that&rsquo;s
hard to break &mdash; a few years (4+) of experience are definitely needed (say, you
should have bumped into <code>@autoreleasepool</code> before ;&ndash;)) and you
should be very familiar with different design patterns (Delegate, Facade, etc),
concepts such as mock objects and various tools to support your workflow (ie. CI
pipelines).</p>

<h2>Backend</h2>

<p>We could definitely use some help in our backend team :)</p>

<p>Even though we&rsquo;re not in a rough spot, we would like to be able to expand
our pipeline and be able to add even more seniority to the team: our usual &ldquo;backend problem&rdquo;
is that we have lots of things we&rsquo;d like to work on / experiment with but not a lot
of engineers, thus we eventually end up giving those projects up or delaying them
too much.</p>

<p>The main technologies you would be working with are:</p>

<ul>
<li>NodeJS</li>
<li>MySQL</li>
<li>Redis</li>
<li>Solr</li>
<li>Golang</li>
<li>Symfony2</li>
<li>a bit of frontend with either Angular or React</li>
</ul>


<p>all of these in the context of our microservice-based SOA: we currently employ
50+ service in production, mostly deployed in Docker containers through Google&rsquo;s
<a href="https://kubernetes.io/">Kubernetes</a>.</p>

<p>Here we would keep in consideration candidates for both a <strong>lead</strong> and a
<strong>senior</strong> position: the current team is working well and we haven&rsquo;t felt the
need to hire a lead engineer over the past few months, but we&rsquo;re open to the
idea if we find the right candidate.</p>

<p>Needless to say, both position would be <strong>quite hands-on</strong> :)</p>

<h2>Apply now!</h2>

<p>What are you waiting for? Send your application at <code>work-in-tech@namshi.com</code> and
let&rsquo;s have a chat!</p>

<p>P.S. A few weeks back I wrote a small piece about <a href="http://tech.namshi.io/blog/2016/12/06/get-that-job-at-namshi/">Namshi&rsquo;s hiring process and <em>desiderata</em></a>,
give it a look!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Newsletter #124]]></title>
    <link href="http://namshi.github.io/blog/2016/02/11/newsletter-number-124/"/>
    <updated>2016-02-11T12:38:00+00:00</updated>
    <id>http://namshi.github.io/blog/2016/02/11/newsletter-number-124</id>
    <content type="html"><![CDATA[<blockquote><p>Hi there!</p>

<p>Like everyone else we love the weekends too, look how happy the guys are:</p></blockquote>

<p><img class="center" src="/images/posts/ping-pong-happy.jpg"></p>

<blockquote><p>and here is your weekly quota of some interesting links</p>

<p>Enjoy!</p></blockquote>

<ul>
<li><p><a href="https://camjackson.net/post/9-things-every-reactjs-beginner-should-know">9 things every react.js beginner should know</a></p></li>
<li><p><a href="http://cleancoders.com/episode/clean-code-episode-1/view">clean coders videos</a></p></li>
<li><p><a href="https://github.com/codekitchen/dinghy?utm_content=bufferf938d">codekitchen/dinghy: faster, friendlier docker on os x</a></p></li>
<li><p><a href="https://blog.docker.com/2016/02/compose-1-6/?mkt_tok=3RkMMJWWfF9wsRonuqTMZKXonjHpfsX57uovUKe/lMI/0ER3fOvrPUfGjI4DScBkI+SLDwEYGJlv6SgFQ7LMMaZq1rgMXBk=">compose 1.6: new compose file for defining networks and volumes | docker blog</a></p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://www.paulund.co.uk/css-buttons-with-icons-but-no-images">css buttons with icons but no images</a></p></li>
<li><p><a href="http://www.desktopneo.com/">desktop neo – rethinking the desktop interface for productivity.</a></p></li>
<li><p><a href="http://layer0.authentise.com/docker-4-useful-tips-you-may-not-know-about.html?utm_content=bufferbb9b6">docker: 4 useful tips, you may not know about</a></p></li>
<li><p><a href="http://verraes.net/2013/09/extract-till-you-drop/?utm_content=buffera385e">extract till you drop</a></p></li>
<li><p><a href="http://flif.info/">flif &ndash; free lossless image format</a></p></li>
<li><p><a href="http://blog.andrewray.me/flux-for-stupid-people/">flux for stupid people</a></p></li>
<li><p><a href="http://stackoverflow.com/questions/18524652/how-to-use-javascript-object-defineproperty">how to use javascript object.defineproperty &ndash; stack overflow</a></p></li>
<li><p><a href="https://github.com/samccone/The-cost-of-transpiling-es2015-in-2016">investigating the overhead cost of compiled es2015</a></p></li>
<li><p><a href="http://brianchang.info/2016/02/01/issues-with-common-software-quality-metrics.html">issues with common software quality metrics</a></p></li>
<li><p><a href="http://javascriptair.com/">javascript air &ndash; the live broadcast podcast all about javascript</a></p></li>
<li><p><a href="http://jpnarowski.com/enterprise-react-redux-part-1/">launching an enterprise react and redux app</a></p></li>
<li><p><a href="http://peter.bourgon.org/blog/2016/02/07/logging-v-instrumentation.html">logging v. instrumentation</a></p></li>
<li><p><a href="http://www.iron.io/microcontainers-tiny-portable-containers/">microcontainers &ndash; tiny, portable docker containers</a></p></li>
<li><p><a href="https://blog.branch.io/mobile-app-developers-are-suffering">mobile app developers are suffering</a></p></li>
<li><p><a href="http://www.lukew.com/ff/entry.asp?1954">mobile web vs. native apps or why you want both</a></p></li>
<li><p><a href="https://github.com/mcollina/climem">monitor the memory consumption of your node process via cli</a></p></li>
<li><p><a href="http://brianchang.info/2016/01/17/object-oriented-developer.html">object-oriented developer</a></p></li>
<li><p><a href="https://github.com/unicorn-standard/starter-kit">project boilerplate using react, redux and uniloc</a></p></li>
<li><p><a href="https://toggl.com/developer-methods-infographic">software development methods explained with cars (infographic)</a></p></li>
<li><p><a href="http://vorpal.js.org/">vorpal &ndash; command line with js</a></p></li>
<li><p><a href="https://www.quora.com/What-do-programmers-at-Facebook-do-all-day">what do programmers at facebook do all day? &ndash; quora</a></p></li>
<li><p><a href="https://www.quora.com/Facebook-1/What-would-happen-to-worlds-economy-if-Facebook-suddenly-stopped-one-day">what would happen to world&rsquo;s economy if facebook suddenly stopped one day? &ndash; quora</a></p></li>
<li><p><a href="https://getpocket.com/a/read/1119332046">why progressive web apps are the future of web development</a></p></li>
<li><p><a href="http://www.yes-www.org/why-use-www/">why use www? – www. is not deprecated</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
