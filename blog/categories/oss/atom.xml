<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSS | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/oss/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2019-02-03T07:52:24+00:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node-file-ensure, a small filesystem utility to make sure a file is there]]></title>
    <link href="http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there/"/>
    <updated>2014-08-22T19:42:00+00:00</updated>
    <id>http://namshi.github.io/blog/2014/08/22/node-file-ensure-a-small-filesystem-utility-to-make-sure-a-file-is-there</id>
    <content type="html"><![CDATA[<p>This weekend we&rsquo;ve come up with a small utility
that will make our life easier, and hopefully <strong>yours</strong>
as well!</p>

<!-- more -->


<p>We use cascading mechanisms for our configurations, so, for
example, we define the config in a few different files:</p>

<ul>
<li><code>base.yml</code>, that has all the common configurations</li>
<li><code>dev.yml</code>, which is for local environments</li>
<li><code>staging.yml</code>, which is for our staging environment</li>
<li><code>live.yml</code>, well&hellip;you guessed it!</li>
</ul>


<p>So, for example, a <code>live.yml</code> might look like:</p>

<p><code>yaml
domain:   'namshi.com'
</code></p>

<p>whereas the base one has many more values:</p>

<p>
<code>yaml
apis:
  version:   'v1'
  domain:    'api.{{ domain }}'
  baseUrl:   'https://{{ apis.domain }}'
</code>
</p>

<p>There&rsquo;s a problem with this approach: if one of the developers
wants to change a value in his <code>dev.js</code> git will tell him that
the file has changed, which is quite annoying!</p>

<p>To overcome this we always put it in the <code>.gitignore</code>:</p>

<p><code>
dev.yml
</code></p>

<p>and instead commit a <code>dev.yml.example</code> file that has the
skeleton of the file, asking everyone, when booting the application
for the first time, to copy that file to a <code>dev.js</code>.</p>

<p>Things work flawlessly until you need to do this 10 times
(I mean, in 10 projects, like we do) or when you forget this step
during the installation and waste a lot of time trying to debug why
the application is not running correctly.</p>

<p>To overcome this annoying issue we decided to develop a small utility,
<a href="https://github.com/namshi/node-file-ensure">node-file-ensure</a>, that
does all of this for you:</p>

<p>``` javascript
var ensure = require(&lsquo;file-ensure&rsquo;);</p>

<p>ensure(&lsquo;./config/dev.yml&rsquo;, {from: &lsquo;./config/dev.yml.example&rsquo;});
```</p>

<p>Simple as that!</p>

<p><code>ensure</code> will make sure to create an empty file if it doesnt find
the one you specified:</p>

<p><code>javascript
ensure('./config/dev.yml');
</code></p>

<p>and is able to copy the contents from another file,
like in the first example above:</p>

<p><code>javascript
ensure('./config/dev.yml', {from: './config/dev.yml.example'});
</code></p>

<p>If you need to run any check after <code>ensure</code> has run,
you can provide a callback:</p>

<p><code>javascript
ensure('path/to/config/dev.yml', {src: 'path/to/config/dev.yml.example'}, function(err){
  console.log(fs.readFileSync('path/to/config/dev.yml').toString() === fs.readFileSync('path/to/config/dev.yml.example').toString());
});
</code></p>

<p>That&rsquo;s it! Tests run through mocha and we&rsquo;ve set them up
on <a href="https://travis-ci.org/namshi/node-file-ensure">travis</a>,
to be on the safe side :)</p>

<p>If you have patches, suggestions or rants&hellip;feel free to open
an <a href="https://github.com/namshi/node-file-ensure/issues">issue on GitHub</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ClusterJS, clusterify your NodeJS applications and achieve zero-downtime deployments]]></title>
    <link href="http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments/"/>
    <updated>2014-06-27T00:45:00+00:00</updated>
    <id>http://namshi.github.io/blog/2014/06/27/clusterjs-clusterify-your-nodejs-applications-and-achieve-zero-downtime-deployments</id>
    <content type="html"><![CDATA[<p>NodeJS has a very nice built-in support for clusters
through its native <a href="http://nodejs.org/api/cluster.html">cluster module</a>:
by using it and realizing we wanted to achieve zero-downtime
deployments (ZDD) on our node apps we decided to kick in.</p>

<!-- more -->


<p>This afternoon <a href="/team#Luciano%20Colosio">Lucio</a> came up to me
and asked me a simple question:</p>

<blockquote><p>Let&rsquo;s do some NodeJS today?</p></blockquote>

<p>and my answer was clear and simple: we need a robust solution
for ZDD, let&rsquo;s do this.</p>

<p>Before jumping with our usual <code>git init</code> and <code>npm init</code>
we searched a bit and found a few alternatives, which
weren&rsquo;t exactly fitting our scenarios:</p>

<ul>
<li><a href="http://learnboost.github.io/cluster/">learnboost/cluster</a>, which is
quite old, discontinued and hasn&rsquo;t been updated in a couple of years</li>
<li><a href="https://github.com/isaacs/cluster-master">isaacs/cluster-master</a>, which
seems to have a whole lot of great things but we wanted to have
the startup script as a global command rather than having to write
a script on our own (but we might wrap it, as it
has a lot of cool features, like resizing your cluster)</li>
</ul>


<p>At the end we decided to go for a simple solution after reading
<a href="http://jaxbot.me/articles/zero_downtime_nodejs_reloads_with_clusters_7_5_2013">this post from Jax</a>
that explains how to achieve ZDD on NodeJS.</p>

<p>In a few, very productive hours, Lucio was able to write
<a href="https://www.npmjs.org/package/clusterjs">ClusterJS</a> and
we decided to release it to the public, as it might
be interesting out there (and because we really like
to receive feedbacks!).</p>

<p>Suppose you have a typical <a href="http://expressjs.com/">ExpressJS</a>
app that runs through an <code>app.js</code> script, in order to run it through
ClusterJS you simply have to:</p>

<p>```
npm install -g clusterjs</p>

<p>clusterjs path/to/app.js
```</p>

<p>At this point you should be able to see something like this:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 4 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21543
&mdash;&ndash; test app loaded as pid: 21544
&mdash;&ndash; test app loaded as pid: 21546
&mdash;&ndash; test app loaded as pid: 21547
Worker 1 running!
Worker 2 running!
Worker 3 running!
Worker 4 running!
```</p>

<p>Cool! You have just put your app in a cluster with four workers!</p>

<p>By default, ClusterJS will boot as many workers as CPUs
in your system; if you wanna change it, simply:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 10</p>

<p>Booting a cluster of ./test/testApp/app.js
We are gonna be launching 10 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 21636
&mdash;&ndash; test app loaded as pid: 21635
Worker 2 running!
Worker 1 running!
&mdash;&ndash; test app loaded as pid: 21650
&mdash;&ndash; test app loaded as pid: 21640
Worker 9 running!
&mdash;&ndash; test app loaded as pid: 21639
&mdash;&ndash; test app loaded as pid: 21641
Worker 4 running!
&mdash;&ndash; test app loaded as pid: 21644
Worker 5 running!
Worker 3 running!
Worker 6 running!
&mdash;&ndash; test app loaded as pid: 21648
&mdash;&ndash; test app loaded as pid: 21646
Worker 8 running!
&mdash;&ndash; test app loaded as pid: 21652
Worker 7 running!
Worker 10 running!
```</p>

<p>How to achieve ZDD? Simply issue a SIGUSR2 command
to your master process, after updating the files
in your app:</p>

<p>```
~/projects/clusterjs (master ✔) ᐅ clusterjs test/testApp/app.js &mdash;workers 2
Booting a cluster of ./test/testApp/app.js
We are gonna be launching 2 workers
The cluster will reload on: SIGUSR2
&mdash;&ndash; test app loaded as pid: 22007
&mdash;&ndash; test app loaded as pid: 22008
Worker 1 running!
Worker 2 running!</p>

<p>SIGUSR2 received, reloading the app
<strong><em> reloading workers!
restarting worker: 1
Shutdown complete for worker 1
Worker 1 died :(
&mdash;&ndash; test app loaded as pid: 22018
&mdash;&ndash; test app loaded as pid: 22021
Worker 3 running!
Worker 4 running!
Replacement worker online.
</em></strong> reloading workers!
restarting worker: 2
Shutdown complete for worker 2
Worker 2 died :(
&mdash;&ndash; test app loaded as pid: 22055
&mdash;&ndash; test app loaded as pid: 22056
Worker 5 running!
Worker 6 running!
Replacement worker online.
```</p>

<p>If you want to change the signal used to reload the cluster,
you can do it with a simple option:</p>

<p><code>
clusterjs test/testApp/app.js --workers 2 --reloadon SIGUSR1
</code></p>

<p>That&rsquo;s (basically) it! Kudos to Lucio for his work and&hellip;</p>

<p>&hellip;if you wanna play with ClusterJS or suggest any improvement,
feel free to have a look around, as
<a href="https://github.com/namshi/clusterjs">ClusterJS is on GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
