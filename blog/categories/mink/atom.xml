<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mink | Tech @ Namshi.com]]></title>
  <link href="http://namshi.github.io/blog/categories/mink/atom.xml" rel="self"/>
  <link href="http://namshi.github.io/"/>
  <updated>2019-02-04T05:52:23+00:00</updated>
  <id>http://namshi.github.io/</id>
  <author>
    <name><![CDATA[Namshi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Behat, Mink and Parallel Runner, A recipe for automated web testing!]]></title>
    <link href="http://namshi.github.io/blog/2013/09/20/behat/"/>
    <updated>2013-09-20T17:13:00+00:00</updated>
    <id>http://namshi.github.io/blog/2013/09/20/behat</id>
    <content type="html"><![CDATA[<p>It was not until I did my first weekend manual testing procedure on Namshi till I came to realize how much time consuming
testing can become. All critical paths starting from registration and login to buying a product using the
available payment methods should be accounted for. Along with that, any irregularities on different pages on the website
must be reported.</p>

<!-- more -->


<p>As Namshi grows and gets more and more complicated, an <em>Automated Web Testing Tool</em> had to be put in place as soon
as possible. An <em>Automated Web Testing Tool</em> is aimed to test that different user interactions with the webpage and web application are going
smoothly without errors or unexpected results.</p>

<p>Keeping those requirements in mind, five main components were considered to build the application:
<a href="http://symfony.com/">Symfony2 Framework</a>, <a href="http://behat.org/">Behat</a> and its
<a href="http://mink.behat.org/">Mink</a> and <a href="https://github.com/shvetsgroup/ParallelRunner">Parallel Runner</a>
extensions and <a href="http://www.doctrine-project.org/projects/orm.html">Doctrine Object Relational Mapper (ORM)</a>.</p>

<p><img class="center" src="/images/arch.jpg" title="&lsquo;App Architecture&rsquo; &lsquo;App Architecture&rsquo;" ></p>

<h2>Behat and Gherkin</h2>

<p>Behat is a PHP Based Behavior Driven Development (BDD) platform that allows the contribution
of stake holders and customers in the development of software products. In BDD, tests are usually
written before the actual development of a feature actually starts. In my opinion,it is a very powerful
approach to overcome any misunderstandings that may arise between developers and other stake
holders during project planning.</p>

<p>The actual tests are written in the Feature files of Behat using the Gherkin language. The following
is an example of a scenario in the integrity feature of Namshi:&ndash;</p>

<p><img class="center" src="/images/gherkin.jpg" title="&lsquo;Gherkin&rsquo; &lsquo;Gherkin&rsquo;" ></p>

<p>As can be noticed, Gherkin is non-technical descriptive language for non-programmers to declare the desired
functionality of the software.</p>

<p>Of course, it is not the case that Behat will automatically understand and run the Feature Files on its own! Behat asks the
programmer to write the definitions of the written statements in a special file named FeatureContext.php right when
you try to run the tests!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>FeatureContext.php </span></figcaption>
 <pre><code class='language-php'>
&amp;lt;?php
/&lt;em&gt;*
* @Then /^I retrieve a couple product links$/
&lt;/em&gt;/
public function iRetrieveACoupleProductLinks() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$links = array_slice($this-&amp;gt;getPage()-&amp;gt;findAll(&apos;css&apos;,&apos;.productsCatalog .itm-link&apos;), 0, 2);
$productsToVisit = array();

foreach ($links as $link) {
    $productsToVisit[] = $link-&amp;gt;getAttribute(&apos;href&apos;);
}

$this-&amp;gt;linksToVisit = $productsToVisit;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
</code></pre></figure></notextile></div></p>

<h2>Mink</h2>

<p>Behat can be used to write tests for any application. In order to test web based applications, Behat has to be extended
with the Mink extension. Mink provides an interface between the web browser and Behat in order to test and run different scenarios.
When extended in the FeatureContext.php, Mink provides a rich library to simulate the interactions that
usually take place between a user on a web browser and the web application.
Mink supports a number of browser emulators: Goutte, Sahi, Zombie, Selenium and Selenium2. In our tool, we are mainly
using Selenium2 driver except for some scenarios where Goutte is used.</p>

<p>To cover Namshi&rsquo;s sets of predefined manual tests, six feature files were created:&ndash;</p>

<ol>
<li>integrity.feature: Tests some simple yet critical components of Namshi.</li>
<li>news.feature: Covers Scenarios for user subscription to the newsletter.</li>
<li>registration.feature: Covers different user registration scenarios.</li>
<li>cod.feature (cash on delivery): Scenarios where a user buys a product using cash on delivery.</li>
<li>cc.feature (credit card): Scenarios when a user buys a product using credit card payment method.</li>
<li>pp.feature (paypal): Scenarios when a user buys a product using paypal payment method.</li>
</ol>


<h2>Behat Parallel Runner</h2>

<p>After some trials with the testing tool, we noticed that execution takes some time to complete (~25 minutes). In order to speed up the
execution, a parallelization tool had to be put in place. <strong>Gearman</strong> is a reputable <em>Job Server</em> mostly used to do work in parallel and
in load balancing across processors. It has an extension in Behat that fetches the appropriate Feature Tags to
their corresponding worker processes. The issue with Gearman is that it is very complicated for a simple tool
like the one we are building. Gearman requires a Job Server, OS libraries, PHP extension and Behat extension to operate.
After some research, another tool was found that can deliver the required performance with much less complexity.
<strong>Behat Parallel Runner</strong> also distributes the BDD Test Suite defined in Behat to a number of Behat Instances
without the need for Gearman&rsquo;s client/worker architecture. This distribution is done by defining different <em>profiles</em>
in <em>behat.yml</em> configuration file and specify the number of parallel processes to run. Parallel Runner
Extension for Behat was downloaded and enabled through composer and in the behat configuration file.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>composer.json </span></figcaption>
 <pre><code class='language-json'>
&amp;ldquo;require&amp;rdquo;: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;shvetsgroup/parallelrunner&quot;: &quot;dev-master&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
</code></pre></figure></notextile></div></p>

<p>In order to integrate Parallel Worker, a configuration file for each website was created. In each configuration
file, the same set of profiles was defined. We took advantage of Behat&rsquo;s filtering option to enable each profile
to run a certain <em>tag</em> that is already set in the <em>feature files</em>.
In each configuration file, six profiles were added such that each one runs one <em>feature tag</em>.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>behat.yml </span></figcaption>
 <pre><code class='language-yaml'>
F1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@int&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@news&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F3:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@reg&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F4:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@cod&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F5:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@cc&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;F6:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;filters:
    tags: &quot;@pp&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div>
Finally, all feature files had to be tagged right before the Feature declaration such that
the extension can identify the scenarios and their corresponding instances.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>behat.yml </span></figcaption>
 <pre><code class='language-yaml'>
default:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extensions:
    shvetsgroup\ParallelRunner\Extension:
        process_count:  6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>registration.feature </span></figcaption>
 <pre><code class='language-gherkin'>
@reg
Feature: Check Namshi registration Scenarios&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@javascript
Scenario: As a user I register a new account, filling the registration form with proper data
    Given I visit the &quot;register&quot; page
    When I type in the following:
    |RegistrationForm_email           |registration.new+test-(timeStamp)@namshi.com |
    |RegistrationForm_first_name   |test                                                                        |
    |RegistrationForm_last_name   |test                                                                        |
    |birthday_day                            |12                                                                          |
    |birthday_month                        |05                                                                          |
    |birthday_year                           |1987                                                                      |
    |RegistrationForm_password    |121212                                                                  |
    |RegistrationForm_password2  |121212                                                                  |
    |RegistrationForm_gender        |male                                                                      |
    When I press &quot;send&quot;
    Then I am registered as &quot;test&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;</code></pre></figure></notextile></div></p>

<h2>Namshi Automated Testing in Action!</h2>

<p>Once all settings are completed, we can start the Automated Testing procedure by running Behat
with the <em>config</em> parameter set to the target configuration file, which is the site to be tested.
<div class='bogus-wrapper'><notextile><figure class='code'> <pre><code class='language-bash'>
bin/behat &amp;mdash;config = behat-ae.yml
</code></pre></figure></notextile></div>
Now, six browser windows will pop up and the test suits get executed in parallel!</p>

<p><img class="center" src="/images/execution.jpg" title="&lsquo;Running Test Suite&rsquo; &lsquo;Running Test Suite&rsquo;" ></p>

<p>When the execution completes, we can open the tool&rsquo;s webpage and review the results!</p>

<p><img class="center" src="/images/results.jpg" title="&lsquo;Results on the webpage&rsquo; &lsquo;Results on the webpage&rsquo;" ></p>

<p>Looks like everything is running smoothly!</p>
]]></content>
  </entry>
  
</feed>
